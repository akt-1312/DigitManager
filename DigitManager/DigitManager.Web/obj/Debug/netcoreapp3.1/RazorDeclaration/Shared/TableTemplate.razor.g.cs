// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DigitManager.Web.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.Web.ExtensionWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using BlazorPro.Spinkit;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary.MainAndSubRelation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary.CryptoExtensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary.ViewModels;

#line default
#line hidden
#nullable disable
    public partial class TableTemplate<TItem> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 119 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\Shared\TableTemplate.razor"
       
    [Parameter]
    public int DefaultPageSize { get; set; }

    public int PageSize { get; set; }

    public int TotalPages { get; set; }

    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public bool IsReloadList { get; set; }

    [Parameter]
    public bool IsShowTableIndex { get; set; }

    [Parameter]
    public RenderFragment TableHeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem> TableRowTemplate { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items { get; set; }

    public IReadOnlyList<TItem> ItemList { get; set; }

    [Parameter]
    public EventCallback<bool> OnAgentFinishedUpdated { get; set; }

    protected override void OnParametersSet()
    {
        PageSize = PageSize == 0 ? DefaultPageSize : PageSize;
        if (Items != null && Items.Any())
        {
            PageSize = PageSize <= 0 ? 20 : PageSize;
            ItemList = Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            if (CurrentPage > TotalPages)
            {
                CurrentPage = TotalPages;
                ItemList = Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }

            if (CurrentPage <= 0 && ItemList != null && ItemList.Any())
            {
                CurrentPage = 1;
            }
        }
        else
        {
            ItemList = new List<TItem>();
            CurrentPage = 0;
            TotalPages = 0;
        }

        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && IsReloadList)
        {
            await UpdateList(CurrentPage);
            IsReloadList = false;

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateList(int pageNumber = 1)
    {
        ItemList = Items.Skip((pageNumber - 1) * PageSize).Take(PageSize).ToList();
        TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        CurrentPage = pageNumber;
        if (CurrentPage > TotalPages)
        {
            CurrentPage = TotalPages;
            ItemList = Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }

        await OnAgentFinishedUpdated.InvokeAsync(false);
    }

    private async Task PaginationNavigateTo(string direction)
    {
        if (direction == "prev" && CurrentPage > 1)
            CurrentPage -= 1;

        if (direction == "next" && CurrentPage < TotalPages)
            CurrentPage += 1;

        if (direction == "first")
            CurrentPage = 1;

        if (direction == "last")
            CurrentPage = TotalPages;

        await UpdateList(CurrentPage);
    }

    private async Task OnPageSizeChange(ChangeEventArgs args)
    {
        //int pageSize;
        if (int.TryParse(args.Value.ToString(), out int pageSize))
        {
            pageSize = pageSize <= 0 ? DefaultPageSize : pageSize;
        }
        else
        {
            pageSize = DefaultPageSize;
        }

        PageSize = pageSize;

        await UpdateList(CurrentPage);
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
