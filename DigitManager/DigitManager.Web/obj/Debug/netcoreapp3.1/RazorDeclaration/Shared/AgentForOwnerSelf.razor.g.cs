// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DigitManager.Web.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.Web.ExtensionWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using BlazorPro.Spinkit;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary.CryptoExtensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\_Imports.razor"
using DigitManager.ModelLibrary.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\Shared\AgentForOwnerSelf.razor"
using DigitManager.ModelLibrary.MainAndSubRelation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\Shared\AgentForOwnerSelf.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    public partial class AgentForOwnerSelf : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 225 "D:\Old Data\DM_Back\DM_2020_12_14\DigitManager\DigitManager.Web\Shared\AgentForOwnerSelf.razor"
       
    [Inject]
    private DigitManager.Web.Services.IAgentService agentService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private ElementReference InputToFocus { get; set; }

    private bool IsDeleteClick { get; set; }

    private string DeleteConfirmationMessage { get; set; } = "";

    [System.ComponentModel.DataAnnotations.ValidateComplexType]
    private Agent Agent { get; set; } = new Agent();

    private Agent DeleteAgent { get; set; } = new Agent();

    private bool IsShowAgentCreateForm { get; set; }

    private bool IsProcessing { get; set; }

    private bool IsTableTemplateFiltered { get; set; }

    [Parameter]
    public List<Agent> Agents { get; set; } = new List<Agent>();

    private string MainAgentListString { get; set; } = "";

    private List<Agent> ToShowAgents { get; set; } = new List<Agent>();

    private string SearchedUserName { get; set; } = "";
    private string SearchedRole { get; set; } = "";
    private string SearchedCommissionRate { get; set; } = "";
    private ElementReference btnDeleteSubmit { get; set; }

    [Parameter]
    public EventCallback<Dictionary<bool, string>> OnAddAgentProcess { get; set; }

    [Parameter]
    public EventCallback<Dictionary<bool, string>> OnUpdateAgentProcess { get; set; }

    [Parameter]
    public EventCallback<Dictionary<bool, string>> OnDeleteAgentProcess { get; set; }

    [Parameter]
    public EventCallback<bool> OnClosedProcessed { get; set; }

    private List<Action> actionsToRunAfterRender { get; set; } = new List<Action>();

    private void RunAfterRunder(Action action) => actionsToRunAfterRender.Add(action);

    //private EditContext editContext;

    protected override void OnInitialized()
    {
        //editContext = new EditContext(Agent);
        GetNewAgentInstant();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var action in actionsToRunAfterRender)
        {
            action();
        }
        actionsToRunAfterRender.Clear();
        base.OnAfterRender(firstRender);
    }


    protected override void OnParametersSet()
    {
        ReLoadAgentList();
        base.OnParametersSet();
    }

    public void Show()
    {
        IsShowAgentCreateForm = true;
        GetNewAgentInstant();
        SetElementFocus();
        //StateHasChanged();
    }

    private async Task SubmitButton_Click()
    {
        IsProcessing = true;
        Dictionary<bool, string> dicProcessMessage = new Dictionary<bool, string>();
        bool isAgentExist;
        if (Agent.AgentId == 0)
        {
            isAgentExist = JsonConvert.DeserializeObject<List<Agent>>(MainAgentListString).ToList()
                            .Where(x => x.UserName.StringCompareFormat() == Agent.UserName.StringCompareFormat()).ToList().Count > 0;
        }
        else
        {
            isAgentExist = JsonConvert.DeserializeObject<List<Agent>>(MainAgentListString).ToList()
                            .Where(x => x.AgentId != Agent.AgentId && x.UserName.StringCompareFormat() == Agent.UserName.StringCompareFormat()).ToList().Count > 0;
        }
        if (isAgentExist)
        {
            string alertMessage = $"Agent name {Agent.UserName} already exist. Please choose another name!";
            dicProcessMessage.Add(false, alertMessage);
            await OnAddAgentProcess.InvokeAsync(dicProcessMessage);
        }
        else
        {
            var agentAsString = JsonConvert.SerializeObject(Agent);
            var agent = JsonConvert.DeserializeObject<Agent>(agentAsString);
            if (Agent.AgentId == 0)
            {
                var result = await agentService.AddAgent(agent);
                if (result != null)
                {
                    GetNewAgentInstant();
                    string infoMessage = $"Agent ( {agent.UserName} ) Created Successfully";
                    dicProcessMessage.Add(true, infoMessage);
                    await OnAddAgentProcess.InvokeAsync(dicProcessMessage);
                    SetElementFocus();
                }
                else
                {
                    string alertMessage = $"Agent name ( {agent.UserName} ) Cannot Save! Error.";
                    dicProcessMessage.Add(false, alertMessage);
                    await OnAddAgentProcess.InvokeAsync(dicProcessMessage);
                }

            }
            else
            {
                var result = await agentService.UpdateAgent(agent);
                if (result != null)
                {
                    GetNewAgentInstant();
                    string infoMessage = $"Agent name ( {agent.UserName} ) Updated Successfully!";
                    dicProcessMessage.Add(true, infoMessage);
                    await OnUpdateAgentProcess.InvokeAsync(dicProcessMessage);
                    SetElementFocus();
                }
                else
                {
                    string alertMessage = $"Agent name ( {agent.UserName} ) Cannot Updete! Error.";
                    dicProcessMessage.Add(false, alertMessage);
                    await OnUpdateAgentProcess.InvokeAsync(dicProcessMessage);
                }
            }
        }
        IsProcessing = false;
    }

    protected void EditButton_Click(Agent agent)
    {
        DeleteAgent = new Agent();
        string searilizeAgent = JsonConvert.SerializeObject(agent);
        Agent = JsonConvert.DeserializeObject<Agent>(searilizeAgent);
        //ReLoadAgentList();
        SetElementFocus();
        StateHasChanged();
    }

    protected void ShowDeleteComfirmation(Agent agent)
    {
        GetNewAgentInstant();
        DeleteAgent = new Agent();
        string searilizeAgent = JsonConvert.SerializeObject(agent);
        DeleteAgent = JsonConvert.DeserializeObject<Agent>(searilizeAgent);
        DeleteConfirmationMessage = "";
        DeleteConfirmationMessage = $"Agent name {agent.UserName}";
        IsDeleteClick = true;
        RunAfterRunder(() => JSRuntime.FocusAsync(btnDeleteSubmit));

    }

    private async Task OnDeleteConfirm_Click()
    {
        IsDeleteClick = false;
        IsProcessing = true;
        var result = await agentService.DeleteAgent(DeleteAgent.AgentId);
        Dictionary<bool, string> dicProcessMessage = new Dictionary<bool, string>();
        if (result != null)
        {
            string deleteSuccessMessage = $"Agent name ( {DeleteAgent.UserName} ) Deleted Successfully!";
            dicProcessMessage.Add(true, deleteSuccessMessage);
            SetElementFocus();
            await OnDeleteAgentProcess.InvokeAsync(dicProcessMessage);
        }
        else
        {
            string deleteErrorMessage = $"Agent name ( {DeleteAgent.UserName} ) Cannot Delete!";
            dicProcessMessage.Add(false, deleteErrorMessage);
            await OnDeleteAgentProcess.InvokeAsync(dicProcessMessage);
        }
        DeleteAgent = new Agent();
        IsProcessing = false;
    }

    protected void HideDeleteConfirmation()
    {
        DeleteConfirmationMessage = "";
        DeleteAgent = new Agent();
        IsDeleteClick = false;
    }

    private void CancelButton_Click()
    {
        ReLoadAgentList();
        GetNewAgentInstant();
        SetElementFocus();
    }

    protected void OnAgentSearchTextChange(ChangeEventArgs args, string columnName)
    {
        string searchedText = args.Value.ToString();
        IsTableTemplateFiltered = true;

        if (columnName == "UserName")
        {
            SearchedUserName = searchedText.StringCompareFormat();
            ReLoadAgentList();
            ToShowAgents = ToShowAgents.Where(x => x.AgentId != Agent.AgentId &&
            x.UserName.StringCompareFormat().Contains(SearchedUserName.StringCompareFormat())).ToList();
        }

        if (columnName == "CommissionRate")
        {
            SearchedCommissionRate = searchedText.StringCompareFormat();
            ReLoadAgentList();
            ToShowAgents = ToShowAgents.Where(x => x.AgentId != Agent.AgentId &&
        x.AgentCommissionMultiply.Value.ToString().StringCompareFormat().Contains(SearchedCommissionRate.StringCompareFormat())).ToList();
        }
        if (columnName == "Role")
        {
            SearchedRole = searchedText.StringCompareFormat();
            ReLoadAgentList();
            ToShowAgents = ToShowAgents.Where(x => x.AgentId != Agent.AgentId &&
        x.AgentOrPlayer.ToString().StringCompareFormat().Contains(SearchedRole.StringCompareFormat())).ToList();
        }
    }

    private void OnSearchingFinished()
    {
        IsTableTemplateFiltered = false;
    }

    protected async Task CloseAgentFormModal()
    {
        ClearAllSearchedTexbox();
        SetInputEmpty("txtSearchedGridView");
        IsShowAgentCreateForm = false;
        GetNewAgentInstant();
        await OnClosedProcessed.InvokeAsync(true);
    }

    protected void ReLoadAgentList()
    {
        Agents = Agents ?? new List<Agent>();
        MainAgentListString = Newtonsoft.Json.JsonConvert.SerializeObject(Agents);
        var agents = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Agent>>(MainAgentListString);
        ToShowAgents = agents.Where(x => x.IsByOwner && x.UserName.StringCompareFormat().Contains(SearchedUserName.StringCompareFormat())
                        && x.AgentOrPlayer.ToString().StringCompareFormat().Contains(SearchedRole.StringCompareFormat())
                        && x.AgentCommissionMultiply.ToString().StringCompareFormat().Contains(SearchedCommissionRate.StringCompareFormat()))
                        .OrderBy(x => x.UserName).ToList();
    }

    public void SetInputEmpty(string className)
    {
        RunAfterRunder(() => JSRuntime.InvokeVoidAsync("SetInputEmpty", className));
    }

    protected void ClearAllSearchedTexbox()
    {
        SearchedUserName = "";
        SearchedRole = "";
        SearchedCommissionRate = "";
    }

    private void SetElementFocus()
    {
        RunAfterRunder(() => JSRuntime.InvokeVoidAsync("SetElementFocusWithId", "txtUserNameToFocus"));
    }

    public void OnRoleSelectChange(ChangeEventArgs args)
    {
        string role = args.Value.ToString();
        if (!string.IsNullOrWhiteSpace(role) && Enum.TryParse(role, out AgentOrPlayerEnum agentOrPlayer))
        {
            if (agentOrPlayer == AgentOrPlayerEnum.Player)
            {
                Agent.AgentCommissionMultiply = 0f;
            }
        }
    }

    private void GetNewAgentInstant()
    {
        Agent = new Agent()
        {
            IsActive = true,
            IsByOwner = true,

        };
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
