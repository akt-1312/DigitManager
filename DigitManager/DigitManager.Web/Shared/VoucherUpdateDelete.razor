@using DigitManager.ModelLibrary.MainAndSubRelation;
@using System.Text.RegularExpressions;
@using DigitManager.ModelLibrary.ViewModels;
@using DigitManager.Web.Services;

<style>
    #voucherUpdDelModal .modal-content {
        background-color: aquamarine;
    }

    #voucherUpdDelModal {
        position: absolute;
    }

    /*.voucherUpdDelModal .close {
        padding: 5px;
        margin: 0;
    }*/

    .btnVoucherUpdDel {
        padding: 3px 10px;
        font-size: 13px;
    }

    .voucherUpdDelModalFooter {
        padding: 5px 12px;
    }

    .voucherUpdDelModalBody {
        padding: 5px 12px;
        height: 500px;
    }

    @@media (min-width: 576px) {
        .modal-dialog {
            max-width: 700px;
            margin: 1.75rem auto;
        }
    }

    #tblUpdDelMainDigit th, #tblUpdDelMainDigit td {
        padding: 0px 5px;
        font-size: 13px;
    }

    .txtSearch {
        width: 6rem;
        font-size: 12px;
        height: 24px;
        border: 0.5px solid silver;
        border-radius: 0.2rem;
    }

    .displayGridInputLabel {
        display: inline-grid;
    }

    .lblSearch {
        font-size: 10px;
        font-weight: 600;
    }

    .tdVoucherUpdDelTblBtn {
        width: 25px;
    }

    .tdVoucherUpdDelTotalAmmount {
        width: 100px;
    }

    #tblUpdDelMainDigit td {
        vertical-align: middle;
        overflow-wrap: anywhere;
        font-size: 11px;
    }

    .table{
        margin-bottom: 6px;
    }
</style>

@if (ShowUpdateDeleteVoucherModal)
{
    <div class="modal fade show d-block" id="voucherUpdDelModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @if (IsProcessing)
                {
                    <div style="position:absolute; width:100%; height:100%; display:flex; z-index:1052;">
                        <Fold Color="blue" Center="true">
                        </Fold>
                    </div>
                }


                @if (IsDeleteClick && !string.IsNullOrWhiteSpace(DeleteConfirmationMessage))
                {
                    <div style="width:100%; height:100%; background: transparent; position:absolute; top:0; left:0;
                    display:flex; justify-content:center; align-items:center; z-index:1051;">
                        <div style="background:blue; padding:15px; border:1px solid silver; border-radius: 1rem; width:400px; text-align:center">
                            <div style="position:relative;">
                                <h5 style="color:blanchedalmond; text-align:center;">Delete Confirmation</h5>
                                <button @onclick="@(() => HideDeleteConfirmation())" style="padding: 0px 5px; border:0.5px solid gold; position:absolute;
                                    right:-5px; top:-5px; background-color:black; color:white; border-radius:0.2rem;">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div style="color:yellow; margin-bottom:10px;">
                                <div>
                                    @DeleteConfirmationMessage
                                </div>
                                <div>
                                    will permanently delete!
                                </div>
                            </div>
                            <div style="display:flex; justify-content:space-between;">
                                <button @onclick="@(() => HideDeleteConfirmation())" class="btnSellingBlock" style="background-color:floralwhite; padding: 10px 20px;">No</button>
                                <button @ref="btnDeleteSubmit" @onclick="OnDeleteChangesVoucher" class="btnSellingBlock" style="background-color:red; padding: 10px 20px;">Yes</button>
                            </div>
                        </div>
                    </div>
                }
                <div class="modal-header voucherUpdDelModal">
                    <h5 class="modal-title text-center d-block w-100 font-weight-bold" id="exampleModalLongTitle">Voucher Book</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="()=> Hide()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body voucherUpdDelModalBody">
                    <div>
                        <div class="form-group displayGridInputLabel">
                            <label class="lblSearch">Agent</label>
                            <select @bind="AgentId" @bind:event="oninput" @onchange="SelectAgentChange" class="txtSearch">
                                <option value="0">--All--</option>
                                @foreach (var agent in Agents)
                                {
                                    <option value="@agent.AgentId">@agent.UserName</option>
                                }
                            </select>
                        </div>
                        <div class="form-group displayGridInputLabel">
                            <label class="lblSearch">Type</label>
                            <select @bind="ShortKey" @bind:event="oninput" @onchange="SelectAgentChange" class="txtSearch">
                                <option value="@ShortKey.WrongTyping">--All--</option>
                                <option value="@ShortKey.ConcernAddTwinNum">ပါတ်အပူး</option>
                                <option value="@ShortKey.TwinNum">အပူး</option>
                                <option value="@ShortKey.ConcernNum">ပါတ်</option>
                                <option value="@ShortKey.PowerNum">ပါဝါ</option>
                                <option value="@ShortKey.AstrologyNum">နက္ခတ်</option>
                                <option value="@ShortKey.RoundAboutAndTwinNum">အပူးအပါခွေ</option>
                                <option value="@ShortKey.RoundAboutNum">ခွေ</option>
                                <option value="@ShortKey.DirectNum">ဒဲ့</option>
                                <option value="@ShortKey.ReverseNum">R</option>
                                <option value="@ShortKey.DirectAndReverseNum">ဒဲ့ R</option>
                                <option value="@ShortKey.FrontNum">ထိပ်</option>
                                <option value="@ShortKey.EndNum">နောက်</option>
                                <option value="@ShortKey.BrotherNum">ညီအကို</option>
                                <option value="@ShortKey.TwoEvenNum">စုံပူး</option>
                                <option value="@ShortKey.TwoOddNum">မပူး</option>
                            </select>
                        </div>
                        <div class="form-group displayGridInputLabel">
                            <label class="lblSearch">Description</label>
                            <input @bind="SearchedString" @oninput="SearchMainDigits" class="txtSearch" placeholder="search" />
                        </div>
                        <button disabled="@(IsProcessing || EditMainDigit.MainDigitId == 0)" @onclick="OnUpdateChangesVoucher" class="btnSellingBlock" style="font-size:13px;">
                            <span>@(IsProcessing ? "Loading..." : "Update")</span>
                        </button>
                        <button disabled="@(IsProcessing || EditMainDigit.MainDigitId == 0)" @onclick="CancelClick" class="btnSellingBlock" style="font-size:13px;">
                            <span>Cancel</span>
                        </button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(EditNumStringErrorMessage))
                    {
                        <div class="w-100">
                            <div style="">
                                <div style="border:0.5px solid silver; padding:0px 5px; color:white; background:red; border-radius:0.2rem;">
                                    <span>@EditNumStringErrorMessage</span>
                                    <button style="position:absolute; right: 12px; height:24px; display:inline-flex;
                                        align-items:center; color:white; background:black; border-radius:0.2rem;
                                        border:0.5px solid yellow;" @onclick="@(() => EditNumStringErrorMessage = "")">
                                        <span>&times;</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="w-100" style="padding:5px 0px;">
                        @{
                            bool realOnly = EditMainDigit.MainDigitId == 0 ? true : false;
                        }
                        <input readonly="@realOnly" @ref="txtEditNumString" @bind="EditNumString" @bind:event="oninput" @onkeydown="UpdateClickByKeyboardKey" class="inputSellingNum w-100"
                               onin style="font-size:12px; height:30px; padding-right:29px;" />
                        <button @onclick="ClearEditString" style="position:absolute; right: 12px; height:30px; display:inline-flex;
                                                                            align-items:center; color:white; background:black; border-radius:0.2rem;
                                                                            border:0.5px solid yellow;">
                            <span class="oi oi-delete"></span>
                        </button>
                    </div>
                    <div class="separateScrollFullHeight" style="height:400px;">
                        @foreach (KeyValuePair<Agent, List<MainDigit>> item in DicMainDigitGroupByAgent)
                        {
                            <div class="text-center" style="color:navy;">@item.Key.UserName</div>
                            <table id="tblUpdDelMainDigit" class="table table-hover table-bordered">
                                <tbody>
                                    @foreach (var mainDigit in item.Value)
                                    {
                                        string choosedRowToUpdDelColor = DeleteMainDigit.MainDigitId == mainDigit.MainDigitId
                                            || EditMainDigit.MainDigitId == mainDigit.MainDigitId ? "background-color:khaki;" : "";
                                        <tr style="@choosedRowToUpdDelColor">
                                            <td>@mainDigit.DescriptionToShowUser</td>
                                            <td class="tdVoucherUpdDelTotalAmmount">@mainDigit.TotalAmmount</td>
                                            <td class="tdVoucherUpdDelTblBtn">
                                                <button @onclick="@(() => EditClick(mainDigit))" style="padding:1px 2px 2px 2px; display:inline-flex; background:yellow;
                                                                                         color:black; border:0.5px solid silver; border-radius:0.1rem;">
                                                    <span class="oi oi-wrench" style=""></span>
                                                </button>
                                            </td>
                                            <td class="tdVoucherUpdDelTblBtn">
                                                <button @onclick="@(()=> ShowDeleteComfirmation(mainDigit))" style="padding:1px 2px 2px 2px; display:inline-flex; background:red;
                                                                                         color:white; border:0.5px solid silver; border-radius:0.1rem;">
                                                    <span class="oi oi-circle-x" style=""></span>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                    <tr class="bg-primary">
                                        <td class="text-right" style="color:yellow;">Total: </td>
                                        <td colspan="3" style="color:yellow;">@item.Value.Sum(x => x.TotalAmmount)</td>
                                    </tr>
                                </tbody>
                            </table>
                        }

                    </div>
                </div>
                @*<div class="modal-footer justify-content-between voucherUpdDelModalFooter">
                        <button type="button" class="btn btn-primary btnVoucherUpdDel" @onclick="()=> OnUpdateChangesVoucher()">Update</button>
                        <button type="button" class="btn btn-danger btnVoucherUpdDel" @onclick="()=> OnDeleteChangesVoucher()">Delete</button>
                        <button type="button" class="btn btn-secondary btnVoucherUpdDel" data-dismiss="modal" @onclick="()=> Hide()">Cancel</button>
                    </div>*@
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    [Inject]
    private IDigitService digitService { get; set; }

    [Parameter]
    public EventCallback<bool> OnUpdateProcessed { get; set; }

    [Parameter]
    public EventCallback<bool> OnDeleteProcessed { get; set; }

    [Parameter]
    public EventCallback<bool> OnClosedProcessed { get; set; }

    [Parameter]
    public List<MainDigit> MainDigitListToUpdDel { get; set; }

    public List<MainDigit> ToShowUpdDelMainDigits { get; set; }

    private string EditNumString { get; set; } = "";

    private ElementReference txtEditNumString { get; set; }

    private ElementReference btnDeleteSubmit { get; set; }

    private bool IsDeleteClick { get; set; }

    private string DeleteConfirmationMessage { get; set; } = "";

    private bool IsProcessing { get; set; }

    [Parameter]
    public List<Agent> Agents { get; set; }

    private int AgentId { get; set; }

    private MainDigit EditMainDigit { get; set; } = new MainDigit();

    private MainDigit DeleteMainDigit { get; set; } = new MainDigit();

    public ShortKey ShortKey { get; set; } = ShortKey.WrongTyping;

    private string SearchedString { get; set; }

    private string EditNumStringErrorMessage { get; set; } = "";

    public Dictionary<Agent, List<MainDigit>> DicMainDigitGroupByAgent { get; set; } = new Dictionary<Agent, List<MainDigit>>();

    public bool ShowUpdateDeleteVoucherModal { get; set; }

    private List<Action> actionsToRunAfterRender { get; set; } = new List<Action>();
    private void RunAfterRender(Action action) => actionsToRunAfterRender.Add(action);

    protected override void OnParametersSet()
    {
        ReloadMainDigits();
        StateHasChanged();
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var action in actionsToRunAfterRender)
        {
            action();
        }
        actionsToRunAfterRender.Clear();
        base.OnAfterRender(firstRender);
    }

    protected void SelectAgentChange()
    {
        ReloadMainDigits();
        ClearEditString();
        StateHasChanged();
    }

    protected void SearchMainDigits(ChangeEventArgs args)
    {
        var value = args.Value.ToString();
        SearchedString = value.Trim();
        ReloadMainDigits();
        ClearEditString();
        StateHasChanged();
    }

    protected void ReloadMainDigits()
    {
        if (MainDigitListToUpdDel != null && MainDigitListToUpdDel.Count > 0)
        {
            if (AgentId != 0 || ShortKey != ShortKey.WrongTyping || !string.IsNullOrWhiteSpace(SearchedString))
            {
                ToShowUpdDelMainDigits = MainDigitListToUpdDel ?? new List<MainDigit>();
                if (AgentId != 0)
                {
                    ToShowUpdDelMainDigits = ToShowUpdDelMainDigits.Where(x => x.Agent.AgentId == AgentId).ToList(); ;
                }
                if (ShortKey != ShortKey.WrongTyping)
                {
                    ToShowUpdDelMainDigits = ToShowUpdDelMainDigits.Where(x => x.ShortcutType == ShortKey).ToList(); ;
                }
                //if (!string.IsNullOrWhiteSpace(SearchedString))
                //{
                ToShowUpdDelMainDigits = ToShowUpdDelMainDigits.Where(x => x.DescriptionToShowUser.Replace(",", string.Empty).StringCompareFormat().Contains(SearchedString.StringCompareFormat())).ToList(); ;
                //}
            }
            else
            {
                ToShowUpdDelMainDigits = MainDigitListToUpdDel ?? new List<MainDigit>();
            }

            DicMainDigitGroupByAgent = ToShowUpdDelMainDigits.Select(x => x.Agent.AgentId).Distinct().ToList().Select(x => new
            {
                agent = ToShowUpdDelMainDigits.Where(gp => gp.AgentId == x).Select(a => a.Agent).FirstOrDefault(),
                mainDigits = ToShowUpdDelMainDigits.Where(gp => gp.AgentId == x).ToList()
            }).ToDictionary(k => k.agent, v => v.mainDigits);
        }
        else
        {
            DicMainDigitGroupByAgent = new Dictionary<Agent, List<MainDigit>>();
        }

    }

    public void Show()
    {
        AgentId = 0;
        ShortKey = ShortKey.WrongTyping;
        SearchedString = "";
        EditMainDigit = new MainDigit();
        DeleteMainDigit = new MainDigit();
        EditNumString = "";
        EditNumStringErrorMessage = "";
        ShowUpdateDeleteVoucherModal = true;
        StateHasChanged();
    }

    public async Task Hide()
    {
        AgentId = 0;
        ShortKey = ShortKey.WrongTyping;
        SearchedString = "";
        EditMainDigit = new MainDigit();
        DeleteMainDigit = new MainDigit();
        EditNumStringErrorMessage = "";
        EditNumString = "";
        ShowUpdateDeleteVoucherModal = false;
        StateHasChanged();
        await OnClosedProcessed.InvokeAsync(true);
    }

    protected async Task OnUpdateChangesVoucher()
    {
        EditNumString = EditNumString.StringCompareFormat();
        if (!string.IsNullOrWhiteSpace(EditNumString) && EditMainDigit.MainDigitId != 0 && !IsProcessing)
        {
            IsProcessing = true;
            Regex re = new Regex(NumStringValidateRegex.regexNumStringValidateRegex, RegexOptions.IgnoreCase);
            if (re.IsMatch(EditNumString))
            {
                OwnerViewModel viewModel = new OwnerViewModel()
                {
                    IntendedDate = EditMainDigit.IntendedDate,
                    AgentId = EditMainDigit.AgentId,
                    TimeAmPM = EditMainDigit.MorningOrEvening
                };
                MainDigit mainDigit = new MainDigit();
                mainDigit = EditNumString.GetMainDigitByNumString(viewModel);
                if (mainDigit.ShortcutType != ShortKey.WrongTyping)
                {
                    mainDigit.MainDigitId = EditMainDigit.MainDigitId;
                    try
                    {
                        var result = await digitService.UpdateMainDigit(mainDigit);
                        if (result != null)
                        {
                            EditNumString = "";
                            EditNumStringErrorMessage = "";
                            EditMainDigit = new MainDigit();
                            await OnUpdateProcessed.InvokeAsync(true);
                        }
                        else
                        {
                            await OnUpdateProcessed.InvokeAsync(false);
                        }
                    }
                    catch (Exception)
                    {
                        await OnUpdateProcessed.InvokeAsync(false);
                    }
                }
                else
                {
                    EditNumStringErrorMessage = "Input is not valid!";
                }
            }
            else
            {
                EditNumStringErrorMessage = "Input is not valid!";
            }
        }
        else
        {
            if (EditMainDigit.MainDigitId == 0)
            {
                EditNumStringErrorMessage = "Choose Data To Update!";
            }
        }
        IsProcessing = false;
    }

    protected async Task OnDeleteChangesVoucher()
    {
        IsDeleteClick = false;
        IsProcessing = true;
        if (DeleteMainDigit.MainDigitId != 0)
        {
            var result = await digitService.DeleteMainDigit(DeleteMainDigit.MainDigitId);

            if (result != null)
            {
                await OnDeleteProcessed.InvokeAsync(true);
            }
            else
            {
                await OnDeleteProcessed.InvokeAsync(false);
            }
        }
        else
        {
            await OnDeleteProcessed.InvokeAsync(false);
        }
        IsProcessing = false;
        HideDeleteConfirmation();
    }

    protected void ShowDeleteComfirmation(MainDigit mainDigit)
    {
        EditMainDigit = new MainDigit();
        EditNumString = "";
        EditNumStringErrorMessage = "";
        DeleteMainDigit = new MainDigit();
        DeleteMainDigit = mainDigit;
        DeleteConfirmationMessage = "";
        DeleteConfirmationMessage = mainDigit.DescriptionToShowUser;
        IsDeleteClick = true;
        RunAfterRender(() => JSRuntime.FocusAsync(btnDeleteSubmit));
    }

    protected void HideDeleteConfirmation()
    {
        DeleteConfirmationMessage = "";
        DeleteMainDigit = new MainDigit();
        IsDeleteClick = false;
    }

    protected async Task UpdateClickByKeyboardKey(KeyboardEventArgs args)
    {
        if (args.Key == "F2")
        {
            if (!string.IsNullOrWhiteSpace(EditNumString.StringCompareFormat()) && EditMainDigit.MainDigitId != 0 && !IsProcessing)
            {
                await OnUpdateChangesVoucher();
            }
        }
    }

    protected void EditClick(MainDigit editMainDigit)
    {
        DeleteMainDigit = new MainDigit();
        EditNumString = "";
        EditNumStringErrorMessage = "";
        EditMainDigit = new MainDigit();
        EditMainDigit = editMainDigit;
        EditNumString = editMainDigit.GetOriginalString();
        RunAfterRender(() => JSRuntime.FocusAsync(txtEditNumString));
        StateHasChanged();
    }

    protected void CancelClick()
    {
        EditNumString = "";
        EditNumStringErrorMessage = "";
        EditMainDigit = new MainDigit();
        DeleteMainDigit = new MainDigit();
    }

    protected void ClearEditString()
    {
        EditNumString = "";
        EditNumStringErrorMessage = "";
        EditMainDigit = new MainDigit();
    }

    private void SetElementFocus()
    {
        RunAfterRender(() => JSRuntime.FocusAsync(txtEditNumString));
    }

}