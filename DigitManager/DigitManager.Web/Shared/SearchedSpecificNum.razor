
<style>
    #searchedSpecificNum .modal-content {
        background-color: aquamarine;
    }

    #tblSearchedSpecificNum th, #tblSearchedSpecificNum td {
        padding: 0px 5px;
        font-size: 13px;
    }

    .table {
        margin-bottom: 6px;
    }

    #tblSearchedSpecificNum td {
        vertical-align: middle;
        overflow-wrap: anywhere;
        font-size: 11px;
    }
</style>

@if (ShowSearchedSpecificNum)
{
    <div class="modal fade show d-block" id="searchedSpecificNum" tabindex="-1" role="dialog"
         aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="position:absolute;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger text-center d-block w-100 font-weight-bold" id="searchedSpecificNumTitle">
                        @SearchedNumString
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="()=> Hide()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div>
                        <div class="form-group displayGridInputLabel">
                            <label class="lblSearch">Agent</label>
                            <select @bind="AgentId" @bind:event="oninput" @onchange="LoadSearchedSubDigits" class="txtSearch">
                                <option value="0">--All--</option>
                                @foreach (var agent in Agents)
                                {
                                    <option value="@agent.AgentId">@agent.UserName</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div>
                        <div class="separateScrollFullHeight" style="height:400px;">
                            @foreach (KeyValuePair<Agent, List<SubDigit>> item in ToShowSearchedSubdigits)
                            {
                                <div class="text-center" style="color:navy;">@item.Key.UserName</div>
                                <table id="tblSearchedSpecificNum" class="table table-hover table-bordered">
                                    <tbody>
                                        @foreach (var subdigit in item.Value)
                                        {
                                            <tr>
                                                <td>@subdigit.MainDigit.DescriptionToShowUser</td>
                                                <td style="width:100px;">@subdigit.Ammount</td>
                                            </tr>
                                        }
                                        <tr class="bg-primary">
                                            <td class="text-right" style="color:yellow;">Total: </td>
                                            <td style="color:yellow;">@item.Value.Sum(x => x.Ammount)</td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                </div>
                @*<div class="modal-footer justify-content-between">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="()=> OnConfirmationChanged(false)">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="()=> OnConfirmationChanged(true)">Delete</button>
                    </div>*@
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string SearchedNumString { get; set; } = "";

    [Parameter]
    public List<SubDigit> SearchedSubdigits { get; set; } = new List<SubDigit>();

    private Dictionary<Agent, List<SubDigit>> ToShowSearchedSubdigits { get; set; } = new Dictionary<Agent, List<SubDigit>>();

    protected int AgentId { get; set; }

    protected List<Agent> Agents { get; set; } = new List<Agent>();

    public bool ShowSearchedSpecificNum { get; set; }

    public void Show()
    {
        ShowSearchedSpecificNum = true;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        LoadSearchedSubDigits();
        base.OnParametersSet();
    }

    public void Hide()
    {
        ShowSearchedSpecificNum = false;
        SearchedNumString = "";
        AgentId = 0;
        ToShowSearchedSubdigits = new Dictionary<Agent, List<SubDigit>>();
        StateHasChanged();
    }

    private void LoadSearchedSubDigits()
    {
        var agents = SearchedSubdigits.Where(x => x.TwoNum.Trim() == SearchedNumString.Trim())
            .Select(x => x.MainDigit.AgentId).Distinct().ToList().Select(a => new
            {
                agent = SearchedSubdigits.Select(y => y.MainDigit.Agent).FirstOrDefault(s => s.AgentId == a),
            }).Select(ag => ag.agent).ToList();
        Agents = agents ?? new List<Agent>();
        var searchedSubdigits = new List<int>();
        if (AgentId == 0)
        {
            searchedSubdigits = SearchedSubdigits.Where(x => x.TwoNum.Trim() == SearchedNumString.Trim()).Select(x => x.MainDigit.AgentId).Distinct().ToList();
        }
        else
        {
            searchedSubdigits = SearchedSubdigits.Where(x => x.TwoNum.Trim() == SearchedNumString.Trim() && x.MainDigit.AgentId == AgentId)
                .Select(x => x.MainDigit.AgentId).Distinct().ToList();
        }

        var subdigitsGroupByAgent = searchedSubdigits.Select(x => new
        {
            agent = SearchedSubdigits.Where(sub => sub.MainDigit.AgentId == x).Select(sub => sub.MainDigit.Agent).FirstOrDefault(),
            subdigits = SearchedSubdigits.Where(sub => sub.MainDigit.AgentId == x && sub.TwoNum.Trim() == SearchedNumString.Trim())
                        .GroupBy(gp => gp.MainDigitId).Select(s=> new
                        {
                            subdigit = s.ToList().Where(d=> d.MainDigitId == s.Key).Select(y=> { y.Ammount = s.ToList().Sum(y => y.Ammount); return y; }).FirstOrDefault()
                        }).Select(b=> b.subdigit).ToList()
        }).ToDictionary(k => k.agent, v => v.subdigits);

        ToShowSearchedSubdigits = subdigitsGroupByAgent ?? new Dictionary<Agent, List<SubDigit>>();
    }


}
