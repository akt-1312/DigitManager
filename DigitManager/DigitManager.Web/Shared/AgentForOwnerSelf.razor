@using DigitManager.ModelLibrary.MainAndSubRelation;
@using Newtonsoft.Json;

<style>
    #agentFormByOwnerSelfModal {
        position: absolute;
    }

        #agentFormByOwnerSelfModal .modal-content {
            background-color: aquamarine;
        }
    /*.agentFormByOwnerSelfModalHeader .close {
        padding: 5px;
        margin: 0;
    }*/
    .agentInputBox {
        width: 6rem;
        font-size: 12px;
        height: 24px;
        border: 0.5px solid silver;
        border-radius: 0.2rem;
    }

    .lblAgentFormModal {
        font-size: 10px;
        font-weight: 600;
    }

    .displayGridFormGroup {
        display: inline-grid;
    }

    #tblAgentCreateModal th, #tblAgentCreateModal td {
        padding: 0px 5px;
        font-size: 13px;
    }

    #divAgentsTbl.separateScrollFullHeight #tblTemplated thead tr th {
        font-size: 13px;
        padding: 3px 20px;
    }

    #divValidationSummary ul.validation-errors {
        font-size: 12px;
        margin-bottom: 0;
    }

        #divValidationSummary ul.validation-errors li {
            color: white;
        }
</style>

@if (IsShowAgentCreateForm)
{
    <div class="modal fade show d-block" id="agentFormByOwnerSelfModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @if (IsProcessing)
                {
                    <div style="position:absolute; width:100%; height:100%; display:flex;">
                        <Fold Color="blue" Center="true">
                        </Fold>
                    </div>
                }

                @if (IsDeleteClick && !string.IsNullOrWhiteSpace(DeleteConfirmationMessage))
                {
                    <div style="width:100%; height:100%; background: transparent; position:absolute; top:0; left:0;
                    display:flex; justify-content:center; align-items:center; z-index:1051;">
                        <div style="background:blue; padding:15px; border:1px solid silver; border-radius: 1rem; width:400px; text-align:center">
                            <div style="position:relative;">
                                <h5 style="color:blanchedalmond; text-align:center;">Delete Confirmation</h5>
                                <button @onclick="@(() => HideDeleteConfirmation())" style="padding: 0px 5px; border:0.5px solid gold; position:absolute;
                                    right:-5px; top:-5px; background-color:black; color:white; border-radius:0.2rem;">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div style="color:yellow; margin-bottom:10px;">
                                <div>
                                    @DeleteConfirmationMessage
                                </div>
                                <div>
                                    will permanently delete!
                                </div>
                            </div>
                            <div style="display:flex; justify-content:space-between;">
                                <button @onclick="@(() => HideDeleteConfirmation())" class="btnSellingBlock" style="background-color:floralwhite; padding: 10px 20px;">No</button>
                                <button @ref="btnDeleteSubmit" @onclick="OnDeleteConfirm_Click" class="btnSellingBlock" style="background-color:red; padding: 10px 20px;">Yes</button>
                            </div>
                        </div>
                    </div>
                }
                <div class="modal-header agentFormByOwnerSelfModalHeader">
                    <h6 class="text-center w-100">Manage Agent</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="@(()=> CloseAgentFormModal())">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="padding-top:5px;">
                    <EditForm Model="Agent" OnValidSubmit="@SubmitButton_Click">
                        <ObjectGraphDataAnnotationsValidator />
                        <div class="mb-1">
                            <div>
                                @if (Agent.AgentId > 0)
                                {
                                    <div class="form-group displayGridFormGroup">
                                        <InputNumber hidden @bind-Value="Agent.AgentId" type="number" />
                                    </div>
                                }
                                <div hidden>
                                    <InputText class="customHiddenElement" @bind-Value="Agent.Password" />
                                    <InputText class="customHiddenElement" @bind-Value="Agent.Mobile" />
                                    <InputCheckbox class="customHiddenElement" @bind-Value="Agent.IsActive"></InputCheckbox>
                                    <InputCheckbox class="customHiddenElement" @bind-Value="Agent.IsByOwner"></InputCheckbox>
                                </div>
                                <div class="form-group displayGridFormGroup">
                                    <label class="lblAgentFormModal">User Name</label>
                                    <InputText id="txtUserNameToFocus" class="agentInputBox" @bind-Value="Agent.UserName" />
                                </div>
                                <div class="form-group displayGridFormGroup">
                                    <label class="lblAgentFormModal">User Role</label>
                                    <InputSelect class="agentInputBox" @bind-Value="Agent.AgentOrPlayer" @oninput="OnRoleSelectChange">
                                        @foreach (var item in Enum.GetValues(typeof(AgentOrPlayerEnum)))
                                            {
                                            <option value="@item">@item.ToString()</option>
                                            }
                                    </InputSelect>
                                </div>
                                @if (Agent.AgentOrPlayer == AgentOrPlayerEnum.Agent)
                                {
                                    <div class="form-group displayGridFormGroup">
                                        <label class="lblAgentFormModal">Commission Rate</label>
                                        <InputNumber class="agentInputBox" @bind-Value="Agent.AgentCommissionMultiply" type="number" />
                                    </div>
                                }
                                <button type="submit" disabled="@IsProcessing" class="btnSellingBlock" style="font-size:13px; width:73px; display:inline;">
                                    @(IsProcessing ? "Loading..." : Agent.AgentId > 0 ? "Update" : "Save")
                                </button>
                                <button disabled="@IsProcessing" type="button" @onclick="CancelButton_Click" class="btnSellingBlock" style="font-size:13px;">
                                    Cancel
                                </button>
                            </div>
                        </div>

                        @*@if (!string.IsNullOrWhiteSpace(AgentCRUDErrorMessage))
                            {*@
                        <div>
                            <div>
                                <div class="w-100">
                                    <div style="">
                                        <div id="divValidationSummary" style="border:0.5px solid silver; position:relative; padding:0px 5px; color:white; background:red; border-radius:0.2rem;">
                                            <ValidationSummary></ValidationSummary>
                                            @*<button style="position:absolute; right: 0px; top:0; height:24px; display:inline-flex;
                                                                                align-items:center; color:white; background:black; border-radius:0.2rem;
                                                                                border:0.5px solid yellow;" @onclick="@(() => AgentCRUDErrorMessage = "")">
                                                    <span>&times;</span>
                                                </button>*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*}*@
                    </EditForm>
                    <div>
                        <div id="divAgentsTbl" class="separateScrollFullHeight" style="min-height:400px; max-height:450px;">
                            <TableTemplate Items="ToShowAgents" IsReloadList="IsTableTemplateFiltered" DefaultPageSize="15"
                                           IsShowTableIndex="true" OnAgentFinishedUpdated="OnSearchingFinished">
                                <TableHeaderTemplate>
                                    <th>No.</th>
                                    <GridColumn ColumnTitle="UserName" OnSearchTextChange="@(e => OnAgentSearchTextChange(e, "UserName"))"></GridColumn>
                                    <GridColumn ColumnTitle="Role" OnSearchTextChange="@(e => OnAgentSearchTextChange(e, "Role"))"></GridColumn>
                                    <GridColumn ColumnTitle="Rate(%)" OnSearchTextChange="@(e => OnAgentSearchTextChange(e, "CommissionRate"))"></GridColumn>
                                    <th class="text-center" style="min-width:90px;">Actions</th>
                                </TableHeaderTemplate>

                                <TableRowTemplate Context="agent">
                                    @if (ToShowAgents != null && ToShowAgents.Any())
                                    {
                                        string rowColor = agent.AgentId == Agent.AgentId ||
                                                agent.AgentId == DeleteAgent.AgentId ? "background-color:khaki" : "";
                                        <td style="@rowColor">@agent.UserName</td>
                                        <td style="@rowColor">@agent.AgentOrPlayer</td>
                                        <td style="@rowColor">@agent.AgentCommissionMultiply</td>
                                        <td class="text-center">
                                            <button type="button" class="btn btn-primary dataListTableActionButton" @onclick="@(()=> EditButton_Click(agent))"><i class="oi oi-wrench"></i></button>
                                            <button type="button" class="btn btn-danger dataListTableActionButton" @onclick="@(() => ShowDeleteComfirmation(agent))"><i class="oi oi-trash"></i></button>
                                        </td>
                                        }
                                        else
                                        {
                                        <td colspan="5">There is no user data.</td>
                                        }
                                </TableRowTemplate>
                            </TableTemplate>
                            @*<table id="tblAgentCreateModal" class="table table-hover table-bordered">
                                    <thead>
                                        <tr>
                                            <th>No.</th>
                                            <th>User Name</th>
                                            <th>Commission Rate</th>
                                            <th>Role</th>
                                            <td></td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach(var agent in ToShowAgents.Select((value, i) => new { value, i }))
                                        {
                                            <tr>
                                                <td>@(agent.i+1)</td>
                                                <td>@</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    private DigitManager.Web.Services.IAgentService agentService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private ElementReference InputToFocus { get; set; }

    private bool IsDeleteClick { get; set; }

    private string DeleteConfirmationMessage { get; set; } = "";

    [System.ComponentModel.DataAnnotations.ValidateComplexType]
    private Agent Agent { get; set; } = new Agent();

    private Agent DeleteAgent { get; set; } = new Agent();

    private bool IsShowAgentCreateForm { get; set; }

    private bool IsProcessing { get; set; }

    private bool IsTableTemplateFiltered { get; set; }

    [Parameter]
    public List<Agent> Agents { get; set; } = new List<Agent>();

    private string MainAgentListString { get; set; } = "";

    private List<Agent> ToShowAgents { get; set; } = new List<Agent>();

    private string SearchedUserName { get; set; } = "";
    private string SearchedRole { get; set; } = "";
    private string SearchedCommissionRate { get; set; } = "";
    private ElementReference btnDeleteSubmit { get; set; }

    [Parameter]
    public EventCallback<Dictionary<bool, string>> OnAddAgentProcess { get; set; }

    [Parameter]
    public EventCallback<Dictionary<bool, string>> OnUpdateAgentProcess { get; set; }

    [Parameter]
    public EventCallback<Dictionary<bool, string>> OnDeleteAgentProcess { get; set; }

    [Parameter]
    public EventCallback<bool> OnClosedProcessed { get; set; }

    private List<Action> actionsToRunAfterRender { get; set; } = new List<Action>();

    private void RunAfterRunder(Action action) => actionsToRunAfterRender.Add(action);

    //private EditContext editContext;

    protected override void OnInitialized()
    {
        //editContext = new EditContext(Agent);
        GetNewAgentInstant();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var action in actionsToRunAfterRender)
        {
            action();
        }
        actionsToRunAfterRender.Clear();
        base.OnAfterRender(firstRender);
    }


    protected override void OnParametersSet()
    {
        ReLoadAgentList();
        base.OnParametersSet();
    }

    public void Show()
    {
        IsShowAgentCreateForm = true;
        GetNewAgentInstant();
        SetElementFocus();
        //StateHasChanged();
    }

    private async Task SubmitButton_Click()
    {
        IsProcessing = true;
        Dictionary<bool, string> dicProcessMessage = new Dictionary<bool, string>();
        bool isAgentExist;
        if (Agent.AgentId == 0)
        {
            isAgentExist = JsonConvert.DeserializeObject<List<Agent>>(MainAgentListString).ToList()
                            .Where(x => x.UserName.StringCompareFormat() == Agent.UserName.StringCompareFormat()).ToList().Count > 0;
        }
        else
        {
            isAgentExist = JsonConvert.DeserializeObject<List<Agent>>(MainAgentListString).ToList()
                            .Where(x => x.AgentId != Agent.AgentId && x.UserName.StringCompareFormat() == Agent.UserName.StringCompareFormat()).ToList().Count > 0;
        }
        if (isAgentExist)
        {
            string alertMessage = $"Agent name {Agent.UserName} already exist. Please choose another name!";
            dicProcessMessage.Add(false, alertMessage);
            await OnAddAgentProcess.InvokeAsync(dicProcessMessage);
        }
        else
        {
            var agentAsString = JsonConvert.SerializeObject(Agent);
            var agent = JsonConvert.DeserializeObject<Agent>(agentAsString);
            if (Agent.AgentId == 0)
            {
                var result = await agentService.AddAgent(agent);
                if (result != null)
                {
                    GetNewAgentInstant();
                    string infoMessage = $"Agent ( {agent.UserName} ) Created Successfully";
                    dicProcessMessage.Add(true, infoMessage);
                    await OnAddAgentProcess.InvokeAsync(dicProcessMessage);
                    SetElementFocus();
                }
                else
                {
                    string alertMessage = $"Agent name ( {agent.UserName} ) Cannot Save! Error.";
                    dicProcessMessage.Add(false, alertMessage);
                    await OnAddAgentProcess.InvokeAsync(dicProcessMessage);
                }

            }
            else
            {
                var result = await agentService.UpdateAgent(agent);
                if (result != null)
                {
                    GetNewAgentInstant();
                    string infoMessage = $"Agent name ( {agent.UserName} ) Updated Successfully!";
                    dicProcessMessage.Add(true, infoMessage);
                    await OnUpdateAgentProcess.InvokeAsync(dicProcessMessage);
                    SetElementFocus();
                }
                else
                {
                    string alertMessage = $"Agent name ( {agent.UserName} ) Cannot Updete! Error.";
                    dicProcessMessage.Add(false, alertMessage);
                    await OnUpdateAgentProcess.InvokeAsync(dicProcessMessage);
                }
            }
        }
        IsProcessing = false;
    }

    protected void EditButton_Click(Agent agent)
    {
        DeleteAgent = new Agent();
        string searilizeAgent = JsonConvert.SerializeObject(agent);
        Agent = JsonConvert.DeserializeObject<Agent>(searilizeAgent);
        //ReLoadAgentList();
        SetElementFocus();
        StateHasChanged();
    }

    protected void ShowDeleteComfirmation(Agent agent)
    {
        GetNewAgentInstant();
        DeleteAgent = new Agent();
        string searilizeAgent = JsonConvert.SerializeObject(agent);
        DeleteAgent = JsonConvert.DeserializeObject<Agent>(searilizeAgent);
        DeleteConfirmationMessage = "";
        DeleteConfirmationMessage = $"Agent name {agent.UserName}";
        IsDeleteClick = true;
        RunAfterRunder(() => JSRuntime.FocusAsync(btnDeleteSubmit));

    }

    private async Task OnDeleteConfirm_Click()
    {
        IsDeleteClick = false;
        IsProcessing = true;
        var result = await agentService.DeleteAgent(DeleteAgent.AgentId);
        Dictionary<bool, string> dicProcessMessage = new Dictionary<bool, string>();
        if (result != null)
        {
            string deleteSuccessMessage = $"Agent name ( {DeleteAgent.UserName} ) Deleted Successfully!";
            dicProcessMessage.Add(true, deleteSuccessMessage);
            SetElementFocus();
            await OnDeleteAgentProcess.InvokeAsync(dicProcessMessage);
        }
        else
        {
            string deleteErrorMessage = $"Agent name ( {DeleteAgent.UserName} ) Cannot Delete!";
            dicProcessMessage.Add(false, deleteErrorMessage);
            await OnDeleteAgentProcess.InvokeAsync(dicProcessMessage);
        }
        DeleteAgent = new Agent();
        IsProcessing = false;
    }

    protected void HideDeleteConfirmation()
    {
        DeleteConfirmationMessage = "";
        DeleteAgent = new Agent();
        IsDeleteClick = false;
    }

    private void CancelButton_Click()
    {
        ReLoadAgentList();
        GetNewAgentInstant();
        SetElementFocus();
    }

    protected void OnAgentSearchTextChange(ChangeEventArgs args, string columnName)
    {
        string searchedText = args.Value.ToString();
        IsTableTemplateFiltered = true;

        if (columnName == "UserName")
        {
            SearchedUserName = searchedText.StringCompareFormat();
            ReLoadAgentList();
            ToShowAgents = ToShowAgents.Where(x => x.AgentId != Agent.AgentId &&
            x.UserName.StringCompareFormat().Contains(SearchedUserName.StringCompareFormat())).ToList();
        }

        if (columnName == "CommissionRate")
        {
            SearchedCommissionRate = searchedText.StringCompareFormat();
            ReLoadAgentList();
            ToShowAgents = ToShowAgents.Where(x => x.AgentId != Agent.AgentId &&
        x.AgentCommissionMultiply.Value.ToString().StringCompareFormat().Contains(SearchedCommissionRate.StringCompareFormat())).ToList();
        }
        if (columnName == "Role")
        {
            SearchedRole = searchedText.StringCompareFormat();
            ReLoadAgentList();
            ToShowAgents = ToShowAgents.Where(x => x.AgentId != Agent.AgentId &&
        x.AgentOrPlayer.ToString().StringCompareFormat().Contains(SearchedRole.StringCompareFormat())).ToList();
        }
    }

    private void OnSearchingFinished()
    {
        IsTableTemplateFiltered = false;
    }

    protected async Task CloseAgentFormModal()
    {
        ClearAllSearchedTexbox();
        SetInputEmpty("txtSearchedGridView");
        IsShowAgentCreateForm = false;
        GetNewAgentInstant();
        await OnClosedProcessed.InvokeAsync(true);
    }

    protected void ReLoadAgentList()
    {
        Agents = Agents ?? new List<Agent>();
        MainAgentListString = Newtonsoft.Json.JsonConvert.SerializeObject(Agents);
        var agents = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Agent>>(MainAgentListString);
        ToShowAgents = agents.Where(x => x.IsByOwner && x.UserName.StringCompareFormat().Contains(SearchedUserName.StringCompareFormat())
                        && x.AgentOrPlayer.ToString().StringCompareFormat().Contains(SearchedRole.StringCompareFormat())
                        && x.AgentCommissionMultiply.ToString().StringCompareFormat().Contains(SearchedCommissionRate.StringCompareFormat()))
                        .OrderBy(x => x.UserName).ToList();
    }

    public void SetInputEmpty(string className)
    {
        RunAfterRunder(() => JSRuntime.InvokeVoidAsync("SetInputEmpty", className));
    }

    protected void ClearAllSearchedTexbox()
    {
        SearchedUserName = "";
        SearchedRole = "";
        SearchedCommissionRate = "";
    }

    private void SetElementFocus()
    {
        RunAfterRunder(() => JSRuntime.InvokeVoidAsync("SetElementFocusWithId", "txtUserNameToFocus"));
    }

    public void OnRoleSelectChange(ChangeEventArgs args)
    {
        string role = args.Value.ToString();
        if (!string.IsNullOrWhiteSpace(role) && Enum.TryParse(role, out AgentOrPlayerEnum agentOrPlayer))
        {
            if (agentOrPlayer == AgentOrPlayerEnum.Player)
            {
                Agent.AgentCommissionMultiply = 0f;
            }
        }
    }

    private void GetNewAgentInstant()
    {
        Agent = new Agent()
        {
            IsActive = true,
            IsByOwner = true,

        };
    }

}
