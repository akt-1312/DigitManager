
<style>
    .modal-content {
        background-color: lemonchiffon;
    }
</style>

@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger text-center d-block w-100 font-weight-bold" id="exampleModalLongTitle">@ConfirmationTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="()=> OnConfirmationChanged(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body bg-dark">
                    <div style="color:yellow;">
                        @ConfirmationMessage
                    </div>
                </div>
                <div class="modal-footer justify-content-between">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="()=> OnConfirmationChanged(false)">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="()=> OnConfirmationChanged(true)">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }

    [Parameter]
    public string ConfirmationTitle { get; set; } = "Delete Confirmation";

    [Parameter]
    public string ConfirmationMessage { get; set; } = "Are You Sure To Delete This Record!";

    public bool ShowConfirmation { get; set; }

    public void Show()
    {
        ShowConfirmation = true;
        StateHasChanged();
    }

    protected async Task OnConfirmationChanged(bool value)
    {
        ShowConfirmation = false;
        await ConfirmationChanged.InvokeAsync(value);
    }

}
